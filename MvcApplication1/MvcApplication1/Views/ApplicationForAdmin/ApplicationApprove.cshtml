
@{
    Layout = null;
}

@model ASP.NET_MVC研修.Models.ApplicationApproveModel

<!DOCTYPE html>

<html>
	<head>
	<title>検索画面</title>
    <script src="~/Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="/Content/bootstrap.css">
        <style>
            
            /*----------------------------------------------*/
            /*CSS方向性
                ①描画範囲はページ固有CSSで定義
                　→水平、垂直方向に分けて描画調整を定義する。

                ②横位置はページ固有CSSで調整
                　→bootstrapやcontainerで定義。
                　　追記：思ったより回り込みが面倒で、全部これで定義出来ないかも。
                　　　　　ってなると、①と混合するから考えどころ。

                ③要素内サイズなどの調整は全体CSSで定義
                
                */
            /*感想：思ったより似たVERTICALとHORIZONTALの
                調整が入るので、いくらか書いていけば経験的に法則が分かるかと。
                分かったら、Vとhのクラス調整するとベターかな。
                たぶん、やってる感じ発想としては間違っていない。
                
                ただ、どうしてもページ固有分が多くなるので、
                ページ固有での共通VやHで妥協するかは検討したほうがいいかも。
                でも、統一レイアウトの観点から統一する方がいいし、
                理論上は出来るはず。
                
                回り込みが面倒で、かなり細かくcontainerを調整しないと
                なんだかんだfloatを個別定義することになる。
                floatはfloatで諦めて切り出すか、描画位置クラスに盛り込むか？*/


            /*----------------------------------------------*/
            /*brief
                cコントロール種別
                コントロール種別ごとに基本デザインを定義

            /*Properties
                border系
                font系
                height系
                text位置系

                ※暫定：float/clear left（改行用）

            /*note
                コントロールの共有部を高さ*デザインで切り出し。
                幅やマージンなどの部分依存のものだけ別切り出し。
                
                このクラス内でborder作って継承出来るならそれがきれいだけど、
                調べた感じ出来ないっぽい。
                いわゆるCSSでの継承。
                
                html側の継承にborder切り分けてもいいけど、
                目的が「デザイン」「描画位置」を継承して可読性高めることなので
                あんまりベターではないかな。
            /*----------------------------------------------*/
             .sampleBORDER /*これクラスで切り出してCSS内で継承させたい。*/
            {
                border-radius: 4px;
                border-width: 1px;
                border-color: #589BD5;
            }

            
            .cTEXT
            {
                border-color:#589BD5;
                border-radius:4px;
                border-width:1px;
                
                font-size:13px;
                height: 19.5px;
                /*暫定*/
                clear:left;
		        float:left;
            }

	        .cLABEL
	        {
                font-size:13px;
                height: 19.5px;
                /*暫定*/
                clear:left;
		        float:left;
	        }

            .cCHECK
            {			
            }
            .cRADIO
            {			
            }
            .cTEXTAREA
            {			
			    width:100%;	
			    height:120px;	
			    margin:0 auto;	
			    display:block;	
			    resize:none;	
            }       
            .cBUTTON
            {
          	    background-color: #589BD5;
		        color:#fff;
		        float:left;
                border:1.5px solid #43729D;							
                border-radius:4px;
                font-size:12px;		
                height:28px;		
            }
            .cFILE
            {
            }
            .cLINK
            {	
            }
            .cDUMMY
            {	
                height: 19.5px;
                visibility:hidden;

                /*暫定*/
                clear:left;
		        float:left;
            }             
            .DivisionBorderTop
            {
                border-radius: 4px;
                border-width: 1.5px;
                border-color: #589BD5;
                border-top:solid;
                width:90%;
                margin:0 auto; 
            }
            
            /*改行をこれに頼ってることにより専用化。暫定。*/
	        .cLABEL_TABLE
	        {
                font-size:13px;
                height: 19.5px;
                /*暫定*/
		        float:left;
	        }
            
            .cTEXT_TABLE
            {
                border-color:#589BD5;
                border-radius:4px;
                border-width:1px;
                
                font-size:13px;
                height: 19.5px;
                /*暫定*/
		        float:left;
            }


            /*----------------------------------------------*/
            /*brief
                v調整方法
                垂直方向の描画調整関連を定義

            /*Properties
                margin-top
                margin-bottom

            /*note           
                v stands for VERTICAL
            /*----------------------------------------------*/

            .vMARGINTOP10 
            {
                margin-top:10px;
            }
            
            .vMARGINBOTs
            {
                margin-bottom:1.5px;
            }
            .vMARGINBOT3
            {
                margin-bottom:3px;
            }

            .vMARGINBOTbs
            {
                margin-bottom:10px;
            }

            .vMARGINTOPBOT5 
            {
            }


            
            /*----------------------------------------------*/
            /*brief
                h調整方法
                水平方向の描画調整関連を定義

            /*Properties
                margin-left
                margin-right
                width(%)

            /*note           
                h stands for HORIZONTAL
            /*----------------------------------------------*/

            .vNEUTRAL_TEXT
            {
                margin-left:2px;
                width:90%;
            }
            
            .vTABLE_SELECT
            {
                margin-right:2px;
                float:right;
                width:10%;
            }
            /*もっと汎用的な名前にすべき。というか
                最初は固有かと思ったけど、似たような横調整結構入るっぽい
             */
            .vTABLE_HEADER
            {
                margin-right:2px;
                float:right;
            }
            
            .vMARGINLEFTs 
            {
                margin-left:2px;
            }
            
            .hMARGINLEFT5 
            {
                margin-left:5px;
            }
            
            .hBUTTONs
            {
                width:80px;
            }
            .hBUTTONl
            {
                width:120px;
            }

            /*===========================================ここからページ固有CSSの予定==============================================*/



            /*----------------------------------------------*/
            /*brief
                r識別名称
                描画領域の定義用

            /*Properties

            /*note           
                r stands for region
            /*----------------------------------------------*/
            

            .rCONTAINER 
            {
                margin:0 auto; 
                min-width:650px;
                max-width:650px;
                width:650px;
                border:1px solid #589BD5;	
            }


            .TABLE 
            {
                width:100%;
                border:1.5px solid #589BD5;	
                border-radius:4px;

                text-align:center;
                font-size:11px;    
            	
            }

            /*全体にかかる（たぶんもともとある標準のthクラス継承？）*/
            /*テーブル単位で固有CSS起こすのがベターっぽい。ページ単位。
                ただ、カラム単位で出来ないっぽい？どうしても無理？*/
            th 
            {
                text-align:center;
            }	      
            
                  
            tr 
            {
                height:26px;
            }

            h1
            {
		        margin-bottom:10px;
              	font-size:14px;
		        border-top:1.5px solid #589BD5;
		        width:90%;                
            }
						
        </style>
	</head>
	
<body>
    
	<div class="rCONTAINER">

        <form id ="fmAll">
		    <div class="row vMARGINBOTbs">
			    <div class="col-xs-2">
				    <l class="cLABEL vMARGINBOTbs hMARGINLEFT5">申請状態</l>
				    <l class="cLABEL vMARGINBOT3 hMARGINLEFT5">氏名</l>
				    <l class="cLABEL vMARGINBOT3 hMARGINLEFT5">所属</l>
				    <l class="cLABEL vMARGINBOT3 hMARGINLEFT5">申請種類</l>
				    <l class="cLABEL vMARGINBOT3 hMARGINLEFT5">タイトル</l>
				    <l class="cLABEL  hMARGINLEFT5 vMARGINBOTbs">申請ファイル</l>
			    </div>
			    <div class="col-xs-3">
				    <l class="cLABEL vMARGINBOTbs vNEUTRAL_TEXT">@Model.申請状態</l>
				    <l class="cLABEL vMARGINBOT3 vNEUTRAL_TEXT">@Model.氏名</l>
				    <l class="cLABEL vMARGINBOT3 vNEUTRAL_TEXT">@Model.所属</l>
				    <l class="cLABEL vMARGINBOT3 vNEUTRAL_TEXT">@Model.申請種類</l>
				    <l class="cLABEL vMARGINBOT3 vNEUTRAL_TEXT">@Model.タイトル</l>
				    <l class="cLABEL  vNEUTRAL_TEXT vMARGINBOTbs" id="lb申請ファイル">@Model.申請ファイル</l>
			    </div>
			    <div class="col-xs-1">
				    <l class="cDUMMY vMARGINBOTbs">dummy</l>
				    <l class="cDUMMY vMARGINBOT3">dummy</l>
				    <l class="cLABEL vMARGINBOT3">役職</l>
			    </div>
			    <div class="col-xs-2">
				    <l class="cDUMMY vMARGINBOTbs">dummy</l>
				    <l class="cDUMMY vMARGINBOT3">dummy</l>
				    <l class="cLABEL vMARGINBOT3">@Model.役職</l>
			    </div>        
			    <div class="col-xs-12">
				    <l class="cLABEL vMARGINBOT3 hMARGINLEFT5">@Model.連絡事項</l>
			    </div>
			    <div class="col-xs-12">
				    <l input type="textarea" class="cTEXTAREA"></l>
			    </div>
		    </div>

            <input type="button" class="cBUTTON hBUTTONs vMARGINTOP10" value="承認" id="bt承認"></input>
            <input type="button" class="cBUTTON hBUTTONs vMARGINTOP10 hMARGINLEFT5" value="差し戻し" id="bt差し戻し"></input>
            <input type="button" class="cBUTTON hBUTTONl vTABLE_HEADER vMARGINTOP10" value="申請一覧に戻る"  id="bt申請一覧に戻る"></input>

        </form>
	</div>

    @********************************************************************@
    @*javascript部分*@
    <script src="~/Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>
    <script type="text/javascript">

        //ロード時にイベントリスナを登録
        //備忘：カッコつけないと紐づけ。
        window.onload = function () { f_SetEvents(); }


        //イベントリスナ登録
        function f_SetEvents() {
            //挟まないパターン
            document.getElementById('bt承認').addEventListener('click', f_承認);
            document.getElementById('bt差し戻し').addEventListener('click', f_差し戻し);
            document.getElementById('bt申請一覧に戻る').addEventListener('click', f_申請一覧に戻る);
            document.getElementById('lb申請ファイル').addEventListener('click', f_ファイルダウンロード);

        }
        //------------------------------------------------------------------------------
        //
        //
        //
        //
        //------------------------------------------------------------------------------
        function f_ファイルダウンロード() {
            var filename = this.innerHTML;
            //受け取り側で移動みたいな感じで定義しないと受け取れない。
            //ajaxでやるならdataにロケーション変更。かな。そのうちやる。
            //?引数=値で送りつつ出来るっぽい。リクエストはpostなのか。フレームワークなので仕組み不明。
            location.href = "/ApplicationForAdmin/ApplicationDownload?fileName=test.txt";

            //$.ajax({
            //    url: "/ApplicationForAdmin/ApplicationDownload",
            //    type: "post",
            //    data: JSON.stringify({ fileName: "test.txt" }),
            //    //data: JSON.stringify({ fileName: filename }),
            //    contentType: 'application/json',
            //    success: function (data) {
            //    },
            //    error: function () {
            //        alert("システムエラーが発生しました");
            //    }
            //});

        }

        //------------------------------------------------------------------------------
        //
        //
        //
        //
        //------------------------------------------------------------------------------
        function f_承認() {
            $.ajax({
                url: "/ApplicationForAdmin/ApplicationChange",
                type: "post",
                data: JSON.stringify({ argID: "a", argSupplyID: "a", arg更新値: "1" }),
                contentType: 'application/json',
                success: function (data) {
                },
                error: function () {
                    alert("システムエラーが発生しました");
                }
            });

        }

        //------------------------------------------------------------------------------
        //
        //
        //
        //
        //------------------------------------------------------------------------------
        function f_差し戻し() {
            $.ajax({
                url: "/ApplicationForAdmin/ApplicationChange",
                type: "post",
                data: JSON.stringify({ argID: "a", argSupplyID: "a", arg更新値: "3" }),
                contentType: 'application/json',
                success: function (data) {
                },
                error: function () {
                    alert("システムエラーが発生しました");
                }
            });
        }

        //------------------------------------------------------------------------------
        //
        //
        //
        //
        //------------------------------------------------------------------------------
        function f_申請一覧に戻る() {
            window.location.href = "/ApplicationForAdmin/Return";
        }

    </script>

</body>


</html>
