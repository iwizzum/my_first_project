@{
    Layout = null;
}

@model ASP.NET_MVC研修.Models.ApplicationInfoModel
@using ASP.NET_MVC研修.Models


<!DOCTYPE html>

<html>
	<head>
	<title>検索画面</title>
	<link rel="stylesheet" type="text/css" href="/Content/bootstrap.css">
        <style>
            
            /*----------------------------------------------*/
            /*CSS方向性
                ①描画範囲はページ固有CSSで定義
                　→水平、垂直方向に分けて描画調整を定義する。

                ②横位置はページ固有CSSで調整
                　→bootstrapやcontainerで定義。
                　　追記：思ったより回り込みが面倒で、全部これで定義出来ないかも。
                　　　　　ってなると、①と混合するから考えどころ。

                ③要素内サイズなどの調整は全体CSSで定義
                
                */
            /*感想：思ったより似たVERTICALとHORIZONTALの
                調整が入るので、いくらか書いていけば経験的に法則が分かるかと。
                分かったら、Vとhのクラス調整するとベターかな。
                たぶん、やってる感じ発想としては間違っていない。
                
                ただ、どうしてもページ固有分が多くなるので、
                ページ固有での共通VやHで妥協するかは検討したほうがいいかも。
                でも、統一レイアウトの観点から統一する方がいいし、
                理論上は出来るはず。
                
                回り込みが面倒で、かなり細かくcontainerを調整しないと
                なんだかんだfloatを個別定義することになる。
                floatはfloatで諦めて切り出すか、描画位置クラスに盛り込むか？*/


            /*----------------------------------------------*/
            /*brief
                cコントロール種別
                コントロール種別ごとに基本デザインを定義

            /*Properties
                border系
                font系
                height系
                text位置系

                ※暫定：float/clear left（改行用）

            /*note
                コントロールの共有部を高さ*デザインで切り出し。
                幅やマージンなどの部分依存のものだけ別切り出し。
                
                このクラス内でborder作って継承出来るならそれがきれいだけど、
                調べた感じ出来ないっぽい。
                いわゆるCSSでの継承。
                
                html側の継承にborder切り分けてもいいけど、
                目的が「デザイン」「描画位置」を継承して可読性高めることなので
                あんまりベターではないかな。
            /*----------------------------------------------*/
             .sampleBORDER /*これクラスで切り出してCSS内で継承させたい。*/
            {
                border-radius: 4px;
                border-width: 1px;
                border-color: #589BD5;
            }

            
            .cTEXT
            {
                border-color:#589BD5;
                border-radius:4px;
                border-width:1px;
                
                font-size:13px;
                height: 19.5px;
                /*暫定*/
                clear:left;
		        float:left;
            }

	        .cLABEL
	        {
                font-size:13px;
                height: 19.5px;
                /*暫定*/
                clear:left;
		        float:left;
	        }

            .cCHECK
            {			
            }
            .cRADIO
            {			
            }
            .cTEXTAREA
            {			
            }       
            .cBUTTON
            {
          	    background-color: #589BD5;
		        color:#fff;
		        float:left;
                border:1.5px solid #43729D;							
                border-radius:4px;
                font-size:12px;		
                height:28px;		
            }
            .cFILE
            {
            }
            .cLINK
            {	
            }
            .cDUMMY
            {	
                height: 19.5px;
                visibility:hidden;

                /*暫定*/
                clear:left;
		        float:left;
            }
            
            /*改行をこれに頼ってることにより専用化。暫定。*/
	        .cLABEL_TABLE
	        {
                font-size:13px;
                height: 19.5px;
                /*暫定*/
		        float:left;
	        }
            
            .cTEXT_TABLE
            {
                border-color:#589BD5;
                border-radius:4px;
                border-width:1px;
                
                font-size:13px;
                height: 19.5px;
                /*暫定*/
		        float:left;
            }


            /*----------------------------------------------*/
            /*brief
                v調整方法
                垂直方向の描画調整関連を定義

            /*Properties
                margin-top
                margin-bottom

            /*note           
                v stands for VERTICAL
            /*----------------------------------------------*/

            .vMARGINTOP5 
            {
            }
            
            .vMARGINBOTs
            {
                margin-bottom:1.5px;
            }

            .vMARGINBOTbs
            {
                margin-bottom:10px;
            }

            .vMARGINTOPBOT5 
            {
            }


            
            /*----------------------------------------------*/
            /*brief
                h調整方法
                水平方向の描画調整関連を定義

            /*Properties
                margin-left
                margin-right
                width(%)

            /*note           
                h stands for HORIZONTAL
            /*----------------------------------------------*/

            .vNEUTRAL_TEXT
            {
                margin-left:2px;
                width:90%;
            }
            
            .vTABLE_SELECT
            {
                margin-right:2px;
                float:right;
                width:10%;
            }
            /*もっと汎用的な名前にすべき。というか
                最初は固有かと思ったけど、似たような横調整結構入るっぽい
             */
            .vTABLE_HEADER
            {
                margin-right:2px;
                float:right;
            }

            .vMARGINLEFTs 
            {
                margin-left:2px;
            }



            /*===========================================ここからページ固有CSSの予定==============================================*/



            /*----------------------------------------------*/
            /*brief
                r識別名称
                描画領域の定義用

            /*Properties

            /*note           
                r stands for region
            /*----------------------------------------------*/
            
            .rCONTAINER 
            {
                max-width: 850px;
                margin:0 auto;
            }


            .TABLE 
            {
                width:100%;
                border:1.5px solid #589BD5;	
                border-radius:4px;

                text-align:center;
                font-size:11px;    
            	
            }

            /*全体にかかる（たぶんもともとある標準のthクラス継承？）*/
            /*テーブル単位で固有CSS起こすのがベターっぽい。ページ単位。
                ただ、カラム単位で出来ないっぽい？どうしても無理？*/
            th 
            {
                text-align:center;
            }	      
            
                  
            tr 
            {
                height:26px;
            }	            

						
        </style>
	</head>
	
<body>
    
	<div class="rCONTAINER">       
		<div class="row">
			<div class="col-xs-12">
				<table border="1" class="TABLE">
					<tr>
						<th colspan="16">
                            @if (Model != null)
                            {
                               <l class="cLABEL_TABLE vMARGINLEFTs"><text>総件数</text>@( Model.書類申請全件.Count )<text>件</text></l>} 
                            else 
                            {
                               <l class="cLABEL_TABLE vMARGINLEFTs">総件数0件</l>	
                            }     
                            <select class="cTEXT_TABLE vTABLE_SELECT" id="cbx表示件数" name ="表示件数">
                                <option value ="0" @if (Model != null && Model.表示件数 == 0) {<text>selected</text>} >すべて</option>
                                <option value ="5" @if (Model != null && Model.表示件数 == 5) {<text>selected</text>} >5件</option>
                                <option value ="10" @if (Model != null && Model.表示件数 == 10) {<text>selected</text>} >10件</option>
                                <option value ="20" @if (Model != null && Model.表示件数 == 20) {<text>selected</text>}  >20件</option>
                                <option value ="50" @if (Model != null && Model.表示件数 == 50) {<text>selected</text>} >50件</option>
                                <option value ="100" @if (Model != null && Model.表示件数 == 100) {<text>selected</text>} >100件</option>
                            </select>
                            <l class="cLABEL_TABLE vTABLE_HEADER">表示件数</l>	
						</th>
					</tr>
					<tr>
						<th width="6%" id ="sort状態">
                            状態
                            <br />
                            <sort>
                            @if (Model != null && Model.ソート列 == "状態")
                              {<text>@Model.ソート順</text>} 
                            </sort>
                        </th>
                        <th width="10%" id ="sort申請ID">
                            申請ID
                            <br />
                            <sort>
                            @if (Model != null && Model.ソート列 == "申請ID")
                              {<text>@Model.ソート順</text>} 
                            </sort>
                        </th>
                        <th width="20%" id ="sort申請種類">
                            申請種類
                            <br />
                            <sort>
                            @if (Model != null && Model.ソート列 == "申請種類")
                              {<text>@Model.ソート順</text>} 
                            </sort>
                        </th>
                        <th width="15%" id ="sortタイトル">
                            タイトル
                            <br />
                            <sort>
                            @if (Model != null && Model.ソート列 == "タイトル")
                              {<text>@Model.ソート順</text>} 
                            </sort>
                        </th>
                        <th width="9%" id ="sort申請日">
                            申請日
                            <br />
                            <sort>
                            @if (Model != null && Model.ソート列 == "申請日")
                              {<text>@Model.ソート順</text>} 
                            </sort>
                        </th>
                        <th width="9%" id ="sort承認日">
                            承認日
                            <br />
                            <sort>
                            @if (Model != null && Model.ソート列 == "承認日")
                              {<text>@Model.ソート順</text>} 
                            </sort>
                        </th>
                        <th width="28%" id ="sort連絡事項">
                            連絡事項
                            <br />
                            <sort>
                            @if (Model != null && Model.ソート列 == "連絡事項")
                              {<text>@Model.ソート順</text>} 
                            </sort>
                        </th>
					</tr>

                    @if (Model != null && Model.画面表示分 != null)
                    {
                        foreach (ApplicationInfoRowModel row in Model.画面表示分)
                        {
                            var i = 1;                               
                            <tr id="@("Row"+i+row.申請ID)">
						        <td width="6%">@row.状態</td>
                                <td width="10%">@row.申請ID</td>
                                <td width="20%">@row.申請種類</td>
                                <td width="15%">@row.タイトル</td>
                                <td width="9%">@row.申請日</td>
                                <td width="9%">@row.承認日</td>
                                <td width="28%">@row.連絡事項</td>
					        </tr>
                            i++;
                        }
                    }
                    
                    @if (Model.表示件数 != 0 && Model.表示件数 < Model.書類申請全件.Count)
                    {
					<tr>
						<th colspan="16">
                            @if (Model.現ページ == (Model.書類申請全件.Count / Model.表示件数 + 1))
                            {
                                <input type="image" src="~/Images/right_triangle_disable.png" id="btn次ページ" style="width:20px;float:right;margin-right:5px"/>
                            }
                            else
                            {
                                <input type="image" src="~/Images/right_triangle.png" id="btn次ページ" style="width:20px;float:right;margin-right:5px" />
                            }     
                            
                            <select class="cTEXT vTABLE_SELECT vTABLE_HEADER" id ="txt現ページ"> 

                            @if (Model.表示件数 != 0)		
                            {		
                                for (int i = 1; i <= Model.書類申請全件.Count / Model.表示件数 + 1; i++)		
                                {		
                                    if(i == Model.現ページ)	
                                    {	
                                        <option selected value="@(i)">@(i)</option>	
                                    }	
                                    else	
                                    {	
                                        <option value="@(i)">@(i)</option>	
                                    }	
                                }
                            }	  
                            @if (Model.現ページ == 1)
                            {
                                <input type="image" src="~/Images/left_triangle_disable.png" id="btn前ページ" style="width:20px;float:right;margin-right:5px"/>
                            }
                            else
                            {
                                <input type="image" src="~/Images/left_triangle.png" id="btn前ページ" style="width:20px;float:right;margin-right:5px" />
                            }                          
						</th>
					</tr>
                    }

				</table>
			</div>
		</div>


	</div>
    
</body>

</html>

